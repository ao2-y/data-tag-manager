type Tag implements Node {
    id: ID!
    parent: Tag
    name: String!
    color: String!
}

extend type Query {
    tags:[Tag]
}

extend type Mutation {
    # タグ自体の操作
    addTag(input:AddTagInput):AddTagPaylod
    removeTag(input:RemoveTagInput):RemoveTagPayload
    updateTag(input:UpdateTagInput):AddTagPaylod
    # Itemへの操作
    addTagToItem(input:AddTagToItemInput):AddTagToItemPayload
    removeTagToItem(input:RemoveTagToItemInput):RemoveTagToItemPayload
}

input AddTagInput {
    clientMutationId: String
    parentId: ID
    name: String!
    color: String!
}

type AddTagPaylod {
    clientMutationId: String
    tag: Tag
}

input UpdateTagInput {
    clientMutationId: String
    id: ID!
    name: String!
    color: String!
}

input RemoveTagInput {
    clientMutaionId: String
    id: ID!
}

type RemoveTagPayload {
    clientMutationId: String
    tag: Tag
}

input AddTagToItemInput {
    clientMutationId: String
    id: ID!
    itemId: ID!
}

type AddTagToItemPayload {
    clientMutationId: String
    item: Item
}

input RemoveTagToItemInput {
    clientMutationId: String
    id: ID!
    itemId: ID!
}

type RemoveTagToItemPayload {
    clientMutationId: String
    item: Item
}