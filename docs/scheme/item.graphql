type Item implements Node {
    id: ID!
    name: String!
    description:String
    metas:[Meta]
    tags:[Tag]
}

extend type Query {
    items(
        first: Int
        after: String
        last: Int
        before: String
    ): ItemConnection
}

type ItemConnection {
    pageInfo: PageInfo
    edges: [ItemEdge]
}

type ItemEdge {
    cursor: String!
    node: Item
}

input AddItemInput {
    clientMutationId: String
    name:String!
    description:String
}

input AddItemWithMetaInput {
    metaKeyId: ID!
    value: String!
}

input AddItemWithTagInput {
    tagId: ID!
}

input AddItemWithMetaAndTagInput {
    clientMutationId: String
    name: String!
    description: String
    metas: [AddItemWithMetaInput]
    tags: [AddItemWithTagInput]
}

type AddItemPayload {
    clientMutationId: String
    item: Item
}

input RemoveItemInput {
    clientMutationId: String
    id: ID!
}

type RemoveItemPayload {
    clientMutationId: String
    item:Item
}

extend type Mutation {
    addItem(input:AddItemInput) :AddItemPayload
    addItemWithMetaAndTag(input: AddItemWithMetaAndTagInput): AddItemPayload
    removeItem(input:RemoveItemInput) : RemoveItemPayload
}